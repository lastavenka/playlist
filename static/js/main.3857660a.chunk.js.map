{"version":3,"sources":["components/sort-controls/sort-controls.jsx","constants.js","components/playlist-table/playlist-table.jsx","components/filters/filters.jsx","components/controls-set/controls-set.jsx","components/spinner/spinner.jsx","components/playlist/playlist.jsx","pages/home/home.jsx","App.js","serviceWorker.js","index.js"],"names":["SortControls","className","this","props","active","reverse","_this","react_default","a","createElement","defineClass","onClick","handleClick","sortBy","PureComponent","PLAYLIST_HEADERS","label","id","PLAYLIST_FILTERS","PLAYLIST_ROWS_COUNT","PLAYLIST_DEFAULT_ROWS_COUNT","PLAYLIST_DEFAULT_SORT_BY","PlayListTable","map","header","index_es","align","key","uid","sort_controls_sort_controls","_this2","data","item","hover","getCells","Object","values","value","getHeaders","getRows","Component","Filters","filters","length","filter","onChange","e","target","getValue","getItems","items","activeFilters","find","getFilters","ControlsSet","itemClass","Spinner","text","Playlist","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","error","loading","rows","currentPage","getPlaylistData","fetch","then","res","handleResponse","catch","err","setState","setError","_this3","status","json","arguments","undefined","spinner_spinner","sortedData","sortData","sliceData","filtersList","filtersIds","forEach","push","_loop","includes","uniqueValues","Set","toConsumableArray","sort","b","localeCompare","unshift","_this$state","reduce","arr","currentfilter","_this$state2","year","_this$state3","slice","_this4","_this$state4","filteredData","filterData","react","showTable","filters_filters","changeFilter","_this5","_this$state5","tableData","decorateTableData","playlist_table_playlist_table","changeSorting","dist_default","pageCount","pageRangeDisplayed","marginPagesDisplayed","forcePage","onPageChange","page","changePage","previousLabel","nextLabel","containerClassName","pageClassName","activeClassName","nextClassName","previousClassName","disabledClassName","breakClassName","controls_set_controls_set","changeRowsCount","toggleSortDirection","selected","_ref","currentFilter","index","indexOf","splice","showError","showSpinner","showContent","Home","playlist_playlist","App","home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3857660a.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./sort-controls.css\";\n\nclass SortControls extends PureComponent {\n  defineClass() {\n    let className = \"sort-controls\";\n\n    if (this.props.active) {\n      className += this.props.reverse\n        ? \" sort-controls_direction_up\"\n        : \" sort-controls_direction_down\";\n    }\n    return className;\n  }\n\n  render() {\n    return (\n      <button\n        className={this.defineClass()}\n        onClick={() => this.props.handleClick(this.props.sortBy)}\n      />\n    );\n  }\n}\n\nSortControls.propTypes = {\n  reverse: PropTypes.bool,\n  active: PropTypes.bool,\n  handleClick: PropTypes.func.isRequired\n};\n\nexport default SortControls;\n","const PLAYLIST_HEADERS = [{\n  label: \"Исполнитель\",\n  id: \"band\"\n}, {\n  label: \"Песня\",\n  id: \"song\"\n}, {\n  label: \"Жанр\",\n  id: \"genre\"\n}, {\n  label: \"Год\",\n  id: \"year\"\n}];\n\nconst PLAYLIST_FILTERS = [{\n  label: \"Исполнитель\",\n  id: \"band\"\n}, {\n  label: \"Жанр\",\n  id: \"genre\"\n}, {\n  label: \"Год\",\n  id: \"year\"\n}];\n\nconst PLAYLIST_ROWS_COUNT = [10, 25, 50, 100];\nconst PLAYLIST_DEFAULT_ROWS_COUNT = 10;\nconst PLAYLIST_DEFAULT_SORT_BY = \"band\";\n\nexport {\n  PLAYLIST_HEADERS,\n  PLAYLIST_FILTERS,\n  PLAYLIST_ROWS_COUNT,\n  PLAYLIST_DEFAULT_ROWS_COUNT,\n  PLAYLIST_DEFAULT_SORT_BY\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow\n} from \"@material-ui/core\";\nimport SortControls from \"../sort-controls/sort-controls\";\nimport { PLAYLIST_HEADERS } from \"../../constants\";\nimport uid from \"uid\";\nimport \"./playlist-table.css\";\n\nclass PlayListTable extends Component {\n  getHeaders() {\n    return PLAYLIST_HEADERS.map(header => (\n      <TableCell align=\"left\" key={uid()}>\n        <div className=\"playlist-table__header\">\n          {header.label}\n          <SortControls\n            sortBy={header.id}\n            active={this.props.sortBy === header.id}\n            reverse={this.props.reverse}\n            handleClick={id => this.props.handleClick(id)}\n          />\n        </div>\n      </TableCell>\n    ));\n  }\n\n  getRows() {\n    const { data } = this.props;\n    return data.map(item => (\n      <TableRow key={uid()} hover>\n        {this.getCells(item)}\n      </TableRow>\n    ));\n  }\n\n  getCells(item) {\n    return Object.values(item).map(value => (\n      <TableCell key={uid()} align=\"left\">\n        {value}\n      </TableCell>\n    ));\n  }\n\n  render() {\n    return (\n      <Table className=\"playlist-table\">\n        <TableHead>\n          <TableRow>{this.getHeaders()}</TableRow>\n        </TableHead>\n        <TableBody>{this.getRows()}</TableBody>\n      </Table>\n    );\n  }\n}\n\nPlayListTable.propTypes = {\n  sortBy: PropTypes.string,\n  reverse: PropTypes.bool,\n  handleClick: PropTypes.func.isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport default PlayListTable;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Select, MenuItem, InputLabel } from \"@material-ui/core\";\nimport uid from \"uid\";\nimport \"./filters.css\";\n\nclass Filters extends PureComponent {\n  getFilters() {\n    if (!this.props.filters || !this.props.filters.length) return;\n\n    return this.props.filters.map(filter => (\n      <InputLabel key={uid()}>\n        {filter.label}\n        <Select\n          className=\"filters__select\"\n          onChange={e => this.props.onChange(filter.id, e.target.value)}\n          value={this.getValue(filter.id)}\n          key={uid()}\n        >\n          {this.getItems(filter.items, filter.id)}\n        </Select>\n      </InputLabel>\n    ));\n  }\n\n  getItems(items) {\n    return items.map(item => (\n      <MenuItem value={item} key={uid()}>\n        {item}\n      </MenuItem>\n    ));\n  }\n\n  getValue(id) {\n    const { activeFilters } = this.props;\n\n    if (activeFilters && activeFilters.length) {\n      const filter = activeFilters.find(filter => filter.id === id);\n      if (filter) {\n        return filter.value;\n      }\n    }\n    return \"все\";\n  }\n\n  render() {\n    return (\n      <div className=\"filters\">\n        <h2 className=\"filters__title\">Фильтр</h2>\n        <form>{this.getFilters()}</form>\n      </div>\n    );\n  }\n}\n\nFilters.propTypes = {\n  filters: PropTypes.arrayOf(PropTypes.object),\n  activeFilters: PropTypes.arrayOf(PropTypes.object),\n  onChange: PropTypes.func.isRequired\n};\n\nexport default Filters;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport uid from \"uid\";\nimport \"./controls-set.css\";\n\nconst ControlsSet = props => {\n  let itemClass = \"controls-set__item\";\n  let activeItemClass = itemClass + \" controls-set__item_state_active\";\n\n  return (\n    <ul className=\"controls-set\">\n      {props.items.map(item => (\n        <li\n          className={props.active === item ? activeItemClass : itemClass}\n          key={uid()}\n        >\n          <button onClick={() => props.handleClick(item)}>{item}</button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nControlsSet.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.number),\n  active: PropTypes.number,\n  handleClick: PropTypes.func.isRequired\n};\n\nexport default ControlsSet;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./spinner.css\";\n\nconst Spinner = props => {\n  return <span className=\"spinner\">{props.text}</span>;\n};\n\nSpinner.propTypes = {\n  text: PropTypes.string.isRequired\n};\n\nexport default Spinner;\n","import React, { Component, Fragment } from \"react\";\nimport \"./playlist.css\";\nimport PlayListTable from \"../playlist-table/playlist-table\";\nimport Filters from \"../filters/filters\";\nimport ControlsSet from \"../controls-set/controls-set\";\nimport Spinner from \"../spinner/spinner\";\nimport {\n  PLAYLIST_DEFAULT_ROWS_COUNT,\n  PLAYLIST_DEFAULT_SORT_BY,\n  PLAYLIST_ROWS_COUNT,\n  PLAYLIST_FILTERS\n} from \"../../constants\";\nimport ReactPaginate from \"react-paginate\";\n\nclass Playlist extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      error: false,\n      loading: true,\n      rows: PLAYLIST_DEFAULT_ROWS_COUNT,\n      currentPage: 1,\n      sortBy: PLAYLIST_DEFAULT_SORT_BY,\n      reverse: false,\n      activeFilters: []\n    };\n  }\n\n  componentDidMount() {\n    this.getPlaylistData();\n  }\n\n  getPlaylistData() {\n    fetch(\"/api/songs/\")\n      .then(res => this.handleResponse(res))\n      .catch(err => {\n        this.setState({ loading: false });\n        this.setError(\"Что-то пошло не так. Пожалуйста, попробуйте позже\");\n      });\n  }\n\n  handleResponse(res) {\n    if (res.status === 200) {\n      res.json().then(data => {\n        this.setState({ data, loading: false });\n      });\n    } else {\n      this.setState({ loading: false });\n      this.setError(\"Что-то пошло не так. Пожалуйста, попробуйте позже\");\n    }\n  }\n\n  setError(error = \"\") {\n    this.setState({ error });\n  }\n\n  showError() {\n    const { error } = this.state;\n    if (error) return <span className=\"playlist__error\">{error}</span>;\n  }\n\n  showSpinner() {\n    if (this.state.loading) return <Spinner text=\"Идет загрузка...\" />;\n  }\n\n  decorateTableData(data) {\n    const sortedData = this.sortData(data);\n    const slicedData = this.sliceData(sortedData);\n\n    return slicedData;\n  }\n\n  getFilters() {\n    let filtersList = [];\n    let filtersIds = [];\n\n    PLAYLIST_FILTERS.forEach(filter => {\n      filtersList.push({ id: filter.id, label: filter.label, items: [] });\n      filtersIds.push(filter.id);\n    });\n\n    this.state.data.forEach(item => {\n      for (let key in item) {\n        if (!filtersIds.includes(key)) continue;\n        const currentFilter = filtersList.find(filter => filter.id === key);\n        currentFilter.items.push(item[key]);\n      }\n    });\n\n    filtersList.forEach(filter => {\n      const uniqueValues = new Set(filter.items);\n\n      filter.items = [...uniqueValues];\n      if (filter.id === \"year\") {\n        filter.items.sort();\n      } else {\n        filter.items.sort((a, b) => a.localeCompare(b));\n      }\n      filter.items.unshift(\"все\");\n    });\n\n    return filtersList;\n  }\n\n  filterData() {\n    const { data, activeFilters } = this.state;\n\n    if (!activeFilters.length) {\n      return data;\n    }\n    return activeFilters.reduce((arr, currentfilter) => {\n      return arr.filter(item => item[currentfilter.id] === currentfilter.value);\n    }, data);\n  }\n\n  sortData(data) {\n    const { sortBy, reverse } = this.state;\n    let sortedData = [];\n\n    if (sortBy === \"year\") {\n      sortedData = data.sort((a, b) =>\n        reverse ? a.year - b.year : b.year - a.year\n      );\n    } else {\n      sortedData = data.sort((a, b) =>\n        reverse\n          ? b[sortBy].localeCompare(a[sortBy])\n          : a[sortBy].localeCompare(b[sortBy])\n      );\n    }\n\n    return sortedData;\n  }\n\n  sliceData(data) {\n    const { rows, currentPage } = this.state;\n\n    return data.slice(rows * (currentPage - 1), rows * currentPage);\n  }\n\n  showContent() {\n    const { data, activeFilters } = this.state;\n    if (!data.length) return;\n\n    const filteredData = this.filterData();\n    const filtersList = this.getFilters();\n\n    return (\n      <Fragment>\n        <div className=\"playlist__inner\">\n          <h2 className=\"playlist__title\">Плейлист</h2>\n          {this.showTable(filteredData)}\n        </div>\n        <Filters\n          filters={filtersList}\n          activeFilters={activeFilters}\n          onChange={(value, id) => this.changeFilter(value, id)}\n        />\n      </Fragment>\n    );\n  }\n\n  showTable(filteredData) {\n    if (!filteredData.length)\n      return (\n        <span>\n          Нет данных для отображения. Попробуйте изменить фильтр поиска.\n        </span>\n      );\n\n    const { rows, currentPage } = this.state;\n    const tableData = this.decorateTableData(filteredData);\n\n    return (\n      <Fragment>\n        <PlayListTable\n          data={tableData}\n          sortBy={this.state.sortBy}\n          reverse={this.state.reverse}\n          handleClick={id => this.changeSorting(id)}\n        />\n        <div className=\"playlist__controls\">\n          <ReactPaginate\n            pageCount={filteredData.length / rows}\n            pageRangeDisplayed={2}\n            marginPagesDisplayed={1}\n            forcePage={currentPage - 1}\n            onPageChange={page => this.changePage(page)}\n            previousLabel={\"<\"}\n            nextLabel={\">\"}\n            containerClassName=\"pagination-controls\"\n            pageClassName=\"pagination-controls__item\"\n            activeClassName=\"pagination-controls__item_state_active\"\n            nextClassName=\"pagination-controls__btn pagination-controls__btn_direction_next\"\n            previousClassName=\"pagination-controls__btn pagination-controls__btn_direction_prev\"\n            disabledClassName=\"pagination-controls__btn_state_disabled\"\n            breakClassName=\"pagination-controls__break\"\n          />\n          <ControlsSet\n            items={PLAYLIST_ROWS_COUNT}\n            active={rows}\n            handleClick={rows => this.changeRowsCount(rows)}\n          />\n        </div>\n      </Fragment>\n    );\n  }\n\n  changeSorting(sortBy) {\n    if (this.state.sortBy === sortBy) return this.toggleSortDirection();\n    this.setState({ sortBy, reverse: false });\n  }\n\n  changePage({ selected }) {\n    this.setState({ currentPage: selected + 1 });\n  }\n\n  changeRowsCount(rows) {\n    if (rows === this.state.rows) return;\n    this.setState({ rows, currentPage: 1 });\n  }\n\n  toggleSortDirection() {\n    this.setState({ reverse: !this.state.reverse });\n  }\n\n  changeFilter(id, value) {\n    let activeFilters = this.state.activeFilters;\n    const currentFilter = activeFilters.find(filter => filter.id === id);\n    if (currentFilter) {\n      const index = activeFilters.indexOf(currentFilter);\n      value === \"все\"\n        ? activeFilters.splice(index, 1)\n        : (activeFilters[index].value = value);\n    } else if (value !== \"все\") {\n      activeFilters.push({ id: id, value: value });\n    }\n    this.setState({ activeFilters, currentPage: 1 });\n  }\n\n  render() {\n    return (\n      <section className=\"playlist\">\n        {this.showError()}\n        {this.showSpinner()}\n        {this.showContent()}\n      </section>\n    );\n  }\n}\n\nexport default Playlist;\n","import React from 'react';\nimport Playlist from '../../components/playlist/playlist';\n\nconst Home  = () => {\n    return (\n      <main className=\"home-page\">\n        <Playlist />\n      </main>\n    );\n}\n\nexport default Home;\n","import React, {\n  Component\n} from 'react';\nimport Home from \"./pages/home/home\";\n\nclass App extends Component {\n  render() {\n    return <Home / > ;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}