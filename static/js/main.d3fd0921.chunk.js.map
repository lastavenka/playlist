{"version":3,"sources":["components/sort-controls/sort-controls.jsx","constants.js","components/playlist-table/playlist-table.jsx","components/controls-set/controls-set.jsx","helpers.js","data.js","components/playlist/playlist.jsx","pages/home/home.jsx","App.js","serviceWorker.js","index.js"],"names":["SortControls","props","react_default","a","createElement","className","active","reverse","defineClass","onClick","handleClick","sortBy","HEADERS","label","id","ROWS_COUNT","DEFAULT_ROWS_COUNT","DEFAULT_SORT_BY","PlayListTable","_this","this","map","header","index_es","align","key","uid","sort_controls_sort_controls","_this2","data","length","item","hover","getCells","Object","values","value","getHeaders","getRows","Component","ControlsSet","items","itemClass","getRandom","min","max","Math","floor","random","getRandomFromArr","arr","generateData","names","genres","i","push","faker","word","band","song","words","genre","year","Promise","resolve","setTimeout","status","JSON","stringify","Playlist","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","error","loading","rows","currentPage","getPlaylistData","then","res","handleResponse","catch","err","setError","setState","parse","arguments","undefined","sortedData","sortData","sliceData","_this$state","sort","b","localeCompare","_this$state2","slice","_this3","_this$state3","react","playlist_table_playlist_table","getTableData","changeSorting","dist_default","pageCount","pageRangeDisplayed","marginPagesDisplayed","forcePage","onPageChange","page","changePage","previousLabel","nextLabel","containerClassName","pageClassName","activeClassName","nextClassName","previousClassName","disabledClassName","breakClassName","controls_set_controls_set","changeRowsCount","toggleSortDirection","selected","_ref","showError","showSpinner","showContent","Home","playlist_playlist","App","home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3fd0921.chunk.js","sourcesContent":["import React from 'react';\nimport './sort-controls.css';\n\nconst SortControls = props => {\n  const defineClass = () => {\n    let className = \"sort-controls\";\n\n    if (props.active) {\n      className += props.reverse ? \" sort-controls_direction_up\" : \" sort-controls_direction_down\";\n    }\n\n    return className;\n  }\n\n    return (\n      <button className={defineClass()} onClick={() => props.handleClick(props.sortBy)} />\n    );\n}\n\nexport default SortControls;\n","const GENRES_COUNT = 10;\nconst SONGS_COUNT = 200;\nconst BANDS_COUNT = 20;\nconst YEAR_MIN = 1986;\nconst YEAR_MAX = 2019;\n\nconst HEADERS = [{\n  label: \"Исполнитель\",\n  id: \"band\"\n}, {\n  label: \"Песня\",\n  id: \"song\"\n}, {\n  label: \"Жанр\",\n  id: \"genre\"\n}, {\n  label: \"Год\",\n  id: \"year\"\n}];\n\nconst ROWS_COUNT = [10, 25, 50, 100];\nconst DEFAULT_ROWS_COUNT = 10;\nconst DEFAULT_SORT_BY = \"band\";\n\nexport {\n  GENRES_COUNT,\n  SONGS_COUNT,\n  BANDS_COUNT,\n  YEAR_MIN,\n  YEAR_MAX,\n  HEADERS,\n  ROWS_COUNT,\n  DEFAULT_ROWS_COUNT,\n  DEFAULT_SORT_BY\n};","import React, { Component } from 'react';\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport SortControls from \"../sort-controls/sort-controls\";\nimport { HEADERS } from \"../../constants\";\nimport uid from \"uid\";\nimport './playlist-table.css';\n\nclass PlayListTable extends Component {\n  getHeaders() {\n    return HEADERS.map(header => <TableCell align=\"left\" key={uid()}>\n      <div className=\"playlist-table__header\">\n        {header.label}\n        <SortControls\n          sortBy={header.id}\n          active={this.props.sortBy === header.id}\n          reverse={this.props.reverse}\n          handleClick={id => this.props.handleClick(id)}\n        />\n      </div>\n    </TableCell>)\n  }\n\n  getRows() {\n    const { data } = this.props;\n    if (!data.length) return;\n\n    return data.map(item => <TableRow key={uid()} hover>{this.getCells(item)}</TableRow>)\n  }\n\n  getCells(item) {\n    return Object.values(item).map(value => <TableCell key={uid()} align=\"left\">{value}</TableCell>)\n  }\n\n  render() {\n    return (\n      <Table className=\"playlist-table\">\n        <TableHead>\n          <TableRow>\n            {this.getHeaders()}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {this.getRows()}\n        </TableBody>\n      </Table>\n    );\n  }\n}\n\nexport default PlayListTable;\n","import React from 'react';\nimport uid from \"uid\";\nimport './controls-set.css';\n\nconst ControlsSet = props => {\n  let itemClass = \"controls-set__item\";\n  let activeItemClass = itemClass + \" controls-set__item_state_active\"\n\n  return (\n    <ul className=\"controls-set\">\n      {props.items.map(item => (\n        <li className={props.active === item ? activeItemClass : itemClass} key={uid()}>\n          <button onClick={() => props.handleClick(item)}>{item}</button>\n        </li>)\n      )}\n    </ul>\n  );\n}\n\nexport default ControlsSet;\n","const getRandom = (min, max) => (min + Math.floor(Math.random() * (max - min)));\nconst getRandomFromArr = arr => arr[getRandom(0, arr.length - 1)];\n\nexport {\n  getRandom,\n  getRandomFromArr\n};\n","import faker from \"faker\";\nimport {\n  GENRES_COUNT,\n  SONGS_COUNT,\n  BANDS_COUNT,\n  YEAR_MIN,\n  YEAR_MAX\n} from \"./constants\";\nimport {\n  getRandom,\n  getRandomFromArr\n} from \"./helpers\";\n\nconst generateData = () => {\n  let names = [];\n  let genres = [];\n  let data = [];\n\n  for (let i = 1; i < BANDS_COUNT; i++) {\n    names.push(faker.random.word());\n  }\n\n  for (let i = 0; i < GENRES_COUNT; i++) {\n    genres.push(faker.random.word());\n  }\n\n  for (let i = 0; i < SONGS_COUNT; i++) {\n    data[i] = {\n      band: getRandomFromArr(names),\n      song: faker.random.words(),\n      genre: getRandomFromArr(genres),\n      year: getRandom(YEAR_MIN, YEAR_MAX)\n    }\n  }\n\n  // Response delay imitation\n  return new Promise(resolve => setTimeout(() => resolve({\n    status: 200,\n    data: JSON.stringify(data)\n  }), 2000));\n}\n\nexport default generateData;\n","import React, { Component, Fragment } from 'react';\nimport './playlist.css';\nimport PlayListTable from \"../playlist-table/playlist-table\";\nimport ControlsSet from \"../controls-set/controls-set\";\nimport generateData from \"../../data\";\nimport { DEFAULT_ROWS_COUNT, DEFAULT_SORT_BY, ROWS_COUNT } from \"../../constants\";\nimport ReactPaginate from 'react-paginate';\n\nclass Playlist extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      error: false,\n      loading: true,\n      rows: DEFAULT_ROWS_COUNT,\n      currentPage: 1,\n      sortBy: DEFAULT_SORT_BY,\n      reverse: false\n    }\n  }\n\n  componentDidMount() {\n    this.getPlaylistData();\n  }\n\n  getPlaylistData() {\n    generateData()\n      .then(res => this.handleResponse(res))\n      .catch(err => this.setError(\"Something went wrong, please try agein later\"));\n  }\n\n  handleResponse(res) {\n    if (res.status === 200) {\n      this.setState({ data: JSON.parse(res.data), loading: false });\n    } else {\n      this.setError(\"Something went wrong, please try agein later\")\n    }\n  }\n\n  setError(error = \"\") {\n    this.setState({ error })\n  }\n\n  showError() {\n    const { error } = this.state;\n    if (error) return <span className=\"playlist__error\">{error}</span>\n  }\n\n  showSpinner() {\n    if (this.state.loading) return <span className=\"playlist__error\">Loading...</span>;\n  }\n\n  getTableData() {\n    const sortedData = this.sortData();\n    const slicedData = this.sliceData(sortedData)\n    return slicedData;\n  }\n\n  sortData() {\n    const { data, sortBy, reverse } = this.state;\n    if (!data.length) return;\n\n    let sortedData = [];\n\n    if (sortBy === \"year\") {\n      sortedData = data.sort((a, b) => reverse ? (a.year - b.year) : (b.year - a.year));\n    } else {\n      sortedData = data.sort((a, b) => reverse ? b[sortBy].localeCompare(a[sortBy]) : a[sortBy].localeCompare(b[sortBy]));\n    }\n\n    return sortedData;\n  }\n\n  sliceData(data) {\n    const { rows, currentPage } = this.state;\n\n    return data.slice(rows * (currentPage - 1), rows * currentPage);\n  }\n\n  showContent() {\n    const { data, rows, currentPage } = this.state;\n    if (!data.length) return;\n\n    return <Fragment>\n      <div className=\"playlist__inner\">\n        <h2 className=\"playlist__title\">Плейлист</h2>\n        <PlayListTable data={this.getTableData()} sortBy={this.state.sortBy} reverse={this.state.reverse} handleClick={id => this.changeSorting(id)} />\n        <div className=\"playlist__controls\">\n          <ReactPaginate\n            pageCount={data.length / rows}\n            pageRangeDisplayed={2}\n            marginPagesDisplayed={1}\n            forcePage={currentPage - 1}\n            onPageChange={page => this.changePage(page)}\n            previousLabel={\"<\"}\n            nextLabel={\">\"}\n            containerClassName=\"pagination-controls\"\n            pageClassName=\"pagination-controls__item\"\n            activeClassName=\"pagination-controls__item_state_active\"\n            nextClassName=\"pagination-controls__btn pagination-controls__btn_direction_next\"\n            previousClassName=\"pagination-controls__btn pagination-controls__btn_direction_prev\"\n            disabledClassName=\"pagination-controls__btn_state_disabled\"\n            breakClassName=\"pagination-controls__break\"\n          />\n          <ControlsSet items={ROWS_COUNT} active={rows} handleClick={rows => this.changeRowsCount(rows)} />\n        </div>\n      </div>\n      {/* <PlaylistFilters /> */}\n    </Fragment>\n  }\n\n  changeSorting(sortBy) {\n    if (this.state.sortBy === sortBy) return this.toggleSortDirection();\n    this.setState({ sortBy, reverse: false });\n  }\n\n  changePage({ selected }) {\n    this.setState({ currentPage: selected + 1 })\n  }\n\n  changeRowsCount(rows) {\n    if (rows === this.state.rows) return;\n    this.setState({ rows, currentPage: 1 })\n  }\n\n  toggleSortDirection() {\n    this.setState({ reverse: !this.state.reverse })\n  }\n\n  render() {\n    return (\n      <section className=\"playlist\">\n          {this.showError()}\n          {this.showSpinner()}\n          {this.showContent()}\n      </section>\n    );\n  }\n}\n\nexport default Playlist;\n","import React from 'react';\nimport Playlist from '../../components/playlist/playlist';\n\nconst Home  = () => {\n    return (\n      <main className=\"home-page\">\n        <Playlist />\n      </main>\n    );\n}\n\nexport default Home;\n","import React, {\n  Component\n} from 'react';\nimport Home from \"./pages/home/home\";\n\nclass App extends Component {\n  render() {\n    return <Home / > ;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}